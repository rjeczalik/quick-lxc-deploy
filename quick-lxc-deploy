#!/usr/bin/env bash

src=$(cd $(dirname ${0}); pwd)

die_usage() {
	echo "usage: quick-lxc-deploy <debian version> <architecture> [<container name>]"
	echo "example: quick-lxc-deploy etch i386"
	exit 1
}

load_config() {
	for c in {/etc/,~/,${src}/}.quick-lxc-deploy.conf; do
		if [ -f "${c}" ]; then
			source "${c}"
			if [ ! -z "${PACKAGES}" ] && [ ! -z "${MIRROR}" ] &&
				[ ! -z "${CACHE_DIR}" ] && [ ! -z "${DEPLOY_DIR}" ]; then
				for d in "${CACHE_DIR}" "${DEPLOY_DIR}"; do
					if [ ! -d "${d}" ]; then
						if ! mkdir -p ${d} 2>/dev/null; then
							echo "## ${d}: failed to create!"
							exit 1
						fi
					fi
				done
			else
				echo "## ${c}: invalid configuration file!"
				exit 1
			fi
		fi
	done
}

configure_keys() {
	if test ! -f ${HOME}/.ssh/lxc_rsa; then
		ssh-keygen -t rsa -N "" -C ${USER} -f ${HOME}/.ssh/lxc_rsa
		ssh-add ${HOME}/.ssh/lxc_rsa
		cat ${HOME}/.ssh/lxc_rsa.pub >> ${HOME}/.ssh/authorized_keys
		chmod 600 ${HOME}/.ssh/authorized_keys
	fi
	if sudo test ! -f /root/.ssh/lxc_rsa; then
		sudo ssh-keygen -t rsa -N "" -C ${USER} -f /root/.ssh/lxc_rsa
		sudo ssh-add /root/.ssh/lxc_rsa
	fi
}

bridge_wireless() {
	sudo bash -c "echo 1 > /proc/sys/net/ipv4/ip_forward"
	if [ `grep -c -E '^net.ipv4.ip_forward=1' /etc/sysctl.conf` -gt 0 ]; then
		echo "** ip_forward entry already exists in /etc/sysctl.conf!"
	else
		sudo bash -c "echo net.ipv4.ip_forward=1 >> /etc/sysctl.conf"
	fi
	if [ `ifconfig wlan0 2>&1 | grep -c error` -eq 0 ]; then
		sudo /sbin/iptables -t nat -A POSTROUTING -o wlan0 -j MASQUERADE
	fi
}

main() {
	( [ -z "${1}" ] || [ -z "${2}" ] ) && die_usage

	load_config
	configure_keys

	local distro="${1}"
	local arch="${2}"
	local basename="${distro}-${arch}"
	[ -z "${3}" ] && local containername=${basename} || local containername="${3}"
	local rootfs="${DEPLOY_DIR}/${containername}"
	local hwaddr="00`echo ${containername} | md5sum | perl -ne 'for ($i=0;$i<10;$i+=2) { print ":".substr($_, $i, 2) }'`"
	local opt_sep=' '

	local i=5
	echo "-- Debian ${distro} (${arch}) is going to be debootstrapped to ${DEPLOY_DIR}/${containername}"
	echo -n "-- To cancel press CTRL+C in"
	while [ ${i} -ge 0 ]; do
		echo -n " ${i}"
		let i--
		sleep 1
	done
	echo

	sudo apt-get -y --force-yes install lxc bridge-utils libvirt-bin debootstrap

	if ! dpkg-query -W debootstrap | perl -ne '/^debootstrap\s+1.*$/ && exit 1'; then
		opt_sep='='
	fi

	if [ ! -d "${rootfs}" ]; then
		if [ ! -f ${CACHE_DIR}/${basename}.tgz ]; then
			sudo debootstrap --verbose --variant=minbase --arch=${arch} --include=${PACKAGES} --make-tarball${opt_sep}${CACHE_DIR}/${basename}.tgz ${distro} `mktemp -d` ${MIRROR} || exit 1
		fi
		sudo debootstrap --verbose --variant=minbase --arch=${arch} --include=${PACKAGES} --unpack-tarball${opt_sep}${CACHE_DIR}/${basename}.tgz ${distro} ${rootfs} ${MIRROR} || exit 1
		for dir in {,${rootfs}}/home/${USER}-${containername}; do
			sudo mkdir -p ${dir}
			sudo chown -R ${USER}:${USER} ${dir}
		done
		# user keys
		cat ${HOME}/.ssh/lxc_rsa.pub >> ${HOME}/.ssh/authorized_keys
		# root keys
		sudo mkdir -p ${rootfs}/root/.ssh
		sudo bash -c "cat /root/.ssh/lxc_rsa.pub >> ${rootfs}/root/.ssh/authorized_keys"
		sudo bash -c "cat >${DEPLOY_DIR}/${containername}.conf <<EOF
lxc.tty = 4
lxc.pts = 1024
lxc.utsname = ${containername}
lxc.rootfs = ${rootfs}
lxc.cgroup.devices.deny = a
lxc.cgroup.devices.allow = c 1:3 rwm
lxc.cgroup.devices.allow = c 1:5 rwm
lxc.cgroup.devices.allow = c 5:1 rwm
lxc.cgroup.devices.allow = c 5:0 rwm
lxc.cgroup.devices.allow = c 4:0 rwm
lxc.cgroup.devices.allow = c 4:1 rwm
lxc.cgroup.devices.allow = c 1:9 rwm
lxc.cgroup.devices.allow = c 1:8 rwm
lxc.cgroup.devices.allow = c 136:* rwm
lxc.cgroup.devices.allow = c 5:2 rwm
lxc.cgroup.devices.allow = c 254:0 rwm
lxc.mount.entry=proc ${rootfs}/proc proc nodev,noexec,nosuid 0 0
lxc.mount.entry=devpts ${rootfs}/dev/pts devpts defaults 0 0
lxc.mount.entry=sysfs ${rootfs}/sys sysfs defaults 0 0
lxc.mount.entry=/home/${USER} ${rootfs}/home/${USER} none rbind 0 0
lxc.network.type = veth
lxc.network.flags = up
lxc.network.link = lxcbr0
lxc.network.name = eth0
lxc.network.hwaddr = ${hwaddr}
EOF"
		sudo chmod ugo-x ${rootfs}/etc/init.d/hwclock*
		sudo bash -c "echo ${containername} > ${rootfs}/etc/hostname"
		sudo bash -c "echo en_US.UTF-8 UTF-8 > ${rootfs}/etc/locale.gen"
		sudo bash -c "cat >${rootfs}/etc/network/interfaces <<EOF
auto lo
iface lo inet loopback

auto eth0
iface eth0 inet dhcp
EOF"
		sudo sed -i -e's/^5:23:respawn/#5:23:respawn/g' ${rootfs}/etc/inittab
		sudo sed -i -e's/^6:23:respawn/#6:23:respawn/g' ${rootfs}/etc/inittab
		sudo mkdir ${rootfs}/home/rjeczalik
		sudo chown rjeczalik:rjeczalik ${rootfs}/home/rjeczalik
		sudo ln -sf ${DEPLOY_DIR}/${containername}.conf /etc/lxc/${containername}.conf
		sudo lxc-start -d -n ${containername} -f /etc/lxc/${containername}.conf
		sleep 15 # lolwut
		local uid=`id -u ${USER}`
		sudo ${src}/lxcssh ${containername} "groupadd -g ${uid} ${USER}; useradd -r -s /bin/bash -d /home/${USER} -g ${uid} -u ${uid} ${USER}"
	else
		echo "## Directory ${rootfs} already exist!"
	fi

	if [ `grep -cE '^RUN' /etc/default/lxc` -eq 0 ]; then
		sudo bash -c "cat >>/etc/default/lxc <<EOF
RUN=yes
EOF"
	fi
	if [ `grep -cE '^CONF_DIR' /etc/default/lxc` -eq 0 ]; then
		sudo bash -c "cat >>/etc/default/lxc <<EOF
CONF_DIR=/etc/lxc
EOF"
	fi

	bridge_wireless

	echo "-- Container rootfs: ${DEPLOY_DIR}/${containername}"
	echo "-- Container configuration: /etc/lxc/${containername}.conf"
	echo "-- Container packages tarball: ${CACHE_DIR}/${containername}.tgz"
	echo "-- For start at boot add ${distro}-${arch} to CONTAINER list in /etc/default/lxc"
}

main ${*}
