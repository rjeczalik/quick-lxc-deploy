#!/usr/bin/env bash

readonly black="\E[0;90m"
readonly blue="\E[0;94m"
readonly red="\E[0;91m"
readonly nocolor="\E[0m"

cmd=`echo ${0##*/} | perl -ne '/^(?:quick-lxc|qlxc)\-(\w+)$/&&print"$1"'`
src=$(cd $(dirname $(readlink -f ${0})); pwd)

die_usage() {
	echo -e "usage: qlxc -h ${black}(prints this help message)${nocolor}"
	echo    "       qlxc deploy <debian or ubuntu version name> amd64|i386 [<container name>]"
	echo
	echo    "Example usages:"
	echo
	echo -e "  ${blue}qlxc deploy raring amd64${nocolor}  Deploys Ubuntu Raring (x86_64) with default hostname"
	echo                     "                            setting"
	echo
	exit 1
}

load_config() {
	for c in {/etc/,~/,${src}/}.{quick-lxc-deploy,qlxc}.conf; do
		if [ -f "${c}" ]; then
			source "${c}"
			if [ ! -z "${PACKAGES}" ] && [ ! -z "${CACHE_DIR}" ] &&
				[ ! -z "${DEPLOY_DIR}" ]; then
				for d in "${CACHE_DIR}" "${DEPLOY_DIR}"; do
					if [ ! -d "${d}" ]; then
						if ! mkdir -p ${d} 2>/dev/null; then
							echo -e "quick-lxc-deploy: ${red}${d}: failed to create!${nocolor}"
							exit 1
						fi
					fi
				done
			else
				echo -e "quick-lxc-deploy: ${red}${c}: invalid configuration file!${nocolor}"
				exit 1
			fi
		fi
	done
}

configure_keys() {
	if test ! -f ${HOME}/.ssh/lxc_rsa; then
		ssh-keygen -t rsa -N "" -C ${USER} -f ${HOME}/.ssh/lxc_rsa
		ssh-add ${HOME}/.ssh/lxc_rsa
		cat ${HOME}/.ssh/lxc_rsa.pub >> ${HOME}/.ssh/authorized_keys
		chmod 600 ${HOME}/.ssh/authorized_keys
	fi
	if sudo test ! -f /root/.ssh/lxc_rsa; then
		sudo ssh-keygen -t rsa -N "" -C ${USER} -f /root/.ssh/lxc_rsa
		sudo ssh-add /root/.ssh/lxc_rsa
	fi
}

bridge_wireless() {
	sudo bash -c "echo 1 > /proc/sys/net/ipv4/ip_forward"
	if [ `grep -c -E '^net.ipv4.ip_forward=1' /etc/sysctl.conf` -gt 0 ]; then
		echo "** ip_forward entry already exists in /etc/sysctl.conf!"
	else
		sudo bash -c "echo net.ipv4.ip_forward=1 >> /etc/sysctl.conf"
	fi
	if [ `ifconfig wlan0 2>&1 | grep -c error` -eq 0 ]; then
		sudo /sbin/iptables -t nat -A POSTROUTING -o wlan0 -j MASQUERADE
	fi
}

pick_mirror() {
	case "${1}" in
		"potato" | "woody" | "sarge" | "etch" | "lenny")
			echo "http://archive.debian.org/debian"
			;;
		"stable" | "testing" | "unstable" | "squeeze" | "wheezy")
			echo "http://ftp.debian.org/debian"
			;;
		"hardy" | "lucid" | "natty" | "oneiric" | "precise" | "quantal" | "raring")
			echo "http://archive.ubuntu.com/ubuntu"
			;;
		*)
			;;
	esac
}

deploy() {
	( [ -z "${1}" ] || [ -z "${2}" ] ) && die_usage

	load_config
	configure_keys

	local distro="${1}"
	local arch="${2}"
	local basename="${distro}-${arch}"
	local mirror=`pick_mirror "${distro}"`
	[ -z "${3}" ] && local containername=${basename} || local containername="${3}"
	local rootfs="${DEPLOY_DIR}/${containername}"
	local hwaddr="00`echo ${containername} | md5sum | perl -ne 'for ($i=0;$i<10;$i+=2) { print ":".substr($_, $i, 2) }'`"
	local opt_sep=' '
	local tarball="${CACHE_DIR}/${basename}-`echo ${PACKAGES} | sha1sum | perl -ne '/([\w\d]+)\s.*/ && print "$1"'`.tgz"

	local i=5
	echo -e "-- Distro ${blue}${distro}${nocolor} (${blue}${arch}${nocolor}) is going to be debootstrapped to"
	echo -e "-- ${DEPLOY_DIR}/${containername}"
	echo -ne "-- To cancel press CTRL+C in${red}"
	while [ ${i} -ge 0 ]; do
		echo -n " ${i}"
		let i--
		sleep 1
	done
	echo -e ${nocolor}

	sudo apt-get -y --force-yes install lxc bridge-utils libvirt-bin debootstrap

	if ! dpkg-query -W debootstrap | perl -ne '/^debootstrap\s+1.*$/ && exit 1'; then
		opt_sep='='
	fi

	if [ ! -d "${rootfs}" ]; then
		if [ ! -f "${tarball}" ]; then
			sudo debootstrap --verbose --no-check-gpg --variant=minbase --arch=${arch} --include="${PACKAGES}" --make-tarball${opt_sep}"${tarball}" ${distro} `mktemp -d` ${mirror} || exit 1
		fi
		sudo debootstrap --verbose --no-check-gpg --variant=minbase --arch=${arch} --include="${PACKAGES}" --unpack-tarball${opt_sep}"${tarball}" ${distro} "${rootfs}" ${mirror} || exit 1
		sudo mkdir -p ${rootfs}/home/${USER}
		sudo chown -R ${USER}:${USER} ${rootfs}/home/${USER}
		sudo chmod 0700 ${rootfs}/home/${USER}
		# user keys
		if ! grep -f ${HOME}/.ssh/lxc_rsa.pub ${HOME}/.ssh/authorized_key &>/dev/null; then
			cat ${HOME}/.ssh/lxc_rsa.pub >> ${HOME}/.ssh/authorized_keys
		fi
		# root keys
		sudo mkdir -p ${rootfs}/root/.ssh
		sudo bash -c "cat /root/.ssh/lxc_rsa.pub >> ${rootfs}/root/.ssh/authorized_keys"
		sudo bash -c "cat >${DEPLOY_DIR}/${containername}.conf <<EOF
lxc.tty = 4
lxc.pts = 1024
lxc.utsname = ${containername}
lxc.rootfs = ${rootfs}
lxc.cgroup.devices.deny = a
lxc.cgroup.devices.allow = c 1:3 rwm
lxc.cgroup.devices.allow = c 1:5 rwm
lxc.cgroup.devices.allow = c 5:1 rwm
lxc.cgroup.devices.allow = c 5:0 rwm
lxc.cgroup.devices.allow = c 4:0 rwm
lxc.cgroup.devices.allow = c 4:1 rwm
lxc.cgroup.devices.allow = c 1:9 rwm
lxc.cgroup.devices.allow = c 1:8 rwm
lxc.cgroup.devices.allow = c 136:* rwm
lxc.cgroup.devices.allow = c 5:2 rwm
lxc.cgroup.devices.allow = c 254:0 rwm
lxc.mount.entry=proc ${rootfs}/proc proc nodev,noexec,nosuid 0 0
lxc.mount.entry=devpts ${rootfs}/dev/pts devpts defaults 0 0
lxc.mount.entry=sysfs ${rootfs}/sys sysfs defaults 0 0
lxc.mount.entry=/home/${USER} ${rootfs}/home/${USER} none rbind 0 0
lxc.network.type = veth
lxc.network.flags = up
lxc.network.link = lxcbr0
lxc.network.name = eth0
lxc.network.hwaddr = ${hwaddr}
EOF"
		sudo chmod ugo-x ${rootfs}/etc/init.d/hwclock*
		sudo bash -c "echo ${containername} > ${rootfs}/etc/hostname"
		sudo bash -c "echo en_US.UTF-8 UTF-8 > ${rootfs}/etc/locale.gen"
		sudo bash -c "cat >${rootfs}/etc/network/interfaces <<EOF
auto lo
iface lo inet loopback

auto eth0
iface eth0 inet dhcp
EOF"
		sudo sed -i -e's/^5:23:respawn/#5:23:respawn/g' ${rootfs}/etc/inittab
		sudo sed -i -e's/^6:23:respawn/#6:23:respawn/g' ${rootfs}/etc/inittab
		sudo mkdir ${rootfs}/home/${USER}
		sudo chown ${USER}:${USER} ${rootfs}/home/${USER}
		sudo ln -sf ${DEPLOY_DIR}/${containername}.conf /etc/lxc/${containername}.conf
		sudo lxc-start -d -n ${containername} -f /etc/lxc/${containername}.conf
		sleep 15 # lolwut
		local uid=`id -u ${USER}`
		sudo ${src}/lxcssh ${containername} "groupadd -g ${uid} ${USER}; useradd -r -s /bin/bash -d /home/${USER} -g ${uid} -u ${uid} ${USER}"
	else
		echo -e "quick-lxc-deploy: ${red}Directory ${rootfs} already exist!${nocolor}"
	fi

	if [ `grep -cE '^RUN' /etc/default/lxc` -eq 0 ]; then
		sudo bash -c "cat >>/etc/default/lxc <<EOF
RUN=yes
EOF"
	fi
	if [ `grep -cE '^CONF_DIR' /etc/default/lxc` -eq 0 ]; then
		sudo bash -c "cat >>/etc/default/lxc <<EOF
CONF_DIR=/etc/lxc
EOF"
	fi

	bridge_wireless

	echo -e "-- Container rootfs: ${blue}${DEPLOY_DIR}/${containername}${nocolor}"
	echo -e "-- Container configuration: ${blue}/etc/lxc/${containername}.conf${nocolor}"
	echo -e "-- Container packages tarball: ${blue}${CACHE_DIR}/${containername}.tgz${nocolor}"
	echo -e "-- To autostart your brand new container at boot link ${blue}/etc/lxc/${containername}.conf${nocolor}"
	echo -e "-- to ${blue}/etc/lxc/auto/${containername}.conf${nocolor}"
}

main() {
	local cmd_arg_idx=1
	if [ -z "${cmd}" ]; then
		cmd=${1}
		cmd_arg_idx=2
	fi
	case "${cmd}" in
		"deploy")
			deploy ${*:${cmd_arg_idx}}
			;;
		"-h" | "--help")
			die_usage
			;;
		*)
			if [ -z "${cmd}" ]; then
				echo -e "qlxc: ${red}Command is empty: use --help for more details"
			else
				echo -e "qlxc: ${red}Unrecognized command: ${cmd}${nocolor}"
			fi
			;;
	esac
}

main ${*}
