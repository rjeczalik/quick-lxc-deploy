#!/usr/bin/env bash

readonly BLACK="\E[0;90m"
readonly BLUE="\E[0;94m"
readonly RED="\E[0;91m"
readonly YELLOW="\E[0;33m"
readonly NOCOLOR="\E[0m"

cmd=`echo ${0##*/} | perl -ne '(/^(?:quick-lxc|qlxc)\-(\w+)$/&&print"$1")||(/^lxcssh$/&&print"ssh")'`
src=$(cd $(dirname $(readlink -f ${0})); pwd)

die_usage() {
  echo -e "Usage: qlxc ${YELLOW}help${NOCOLOR}   ${BLACK}(prints this help message)${NOCOLOR}"
  echo -e "       qlxc ${YELLOW}deploy${NOCOLOR} <distro name> amd64|i386 [<container name>]"
  echo -e "       qlxc ${YELLOW}ssh${NOCOLOR}    [<hostname or index>]    [<command>]"
  echo -e "       qlxc ${YELLOW}start${NOCOLOR}  [<hostname or index>]"
  echo -e "       qlxc ${YELLOW}stop${NOCOLOR}   [<hostname or index>]"
  echo -e "       qlxc ${YELLOW}rm${NOCOLOR}     [<hostname or index>]"
  echo
  echo    "Example usages:"
  echo
  echo -e "  ${BLUE}qlxc deploy raring amd64${NOCOLOR}        Deploys Ubuntu Raring (x86_64) with default"
  echo                     "                                  hostname setting"
  echo
  echo -e "  ${BLUE}qlxc ssh 0 \"echo \\\$(hostname)\"${NOCOLOR}  Echoes hostname of first container"
  echo
  exit 1
}

load_config() {
  for c in {/etc/,${HOME}/,${src}/}.{quick-lxc-deploy,qlxc}.conf; do
    if [ -f "${c}" ]; then
      source "${c}"
      if [ ! -z "${PACKAGES}" ] && [ ! -z "${CACHE_DIR}" ] &&
        [ ! -z "${DEPLOY_DIR}" ]; then
        for d in "${CACHE_DIR}" "${DEPLOY_DIR}"; do
          if [ ! -d "${d}" ]; then
            if ! mkdir -p ${d} 2>/dev/null; then
              echo -e "quick-lxc-deploy: ${RED}${d}: failed to create!${NOCOLOR}"
              exit 1
            fi
          fi
        done
        break
      else
        echo -e "quick-lxc-deploy: ${RED}${c}: invalid configuration file!${NOCOLOR}"
        exit 1
      fi
    fi
  done
}

configure_keys() {
  if test ! -f ${HOME}/.ssh/lxc_rsa; then
    ssh-keygen -t rsa -N "" -C ${USER} -f ${HOME}/.ssh/lxc_rsa
    ssh-add ${HOME}/.ssh/lxc_rsa
    cat ${HOME}/.ssh/lxc_rsa.pub >> ${HOME}/.ssh/authorized_keys
    chmod 600 ${HOME}/.ssh/authorized_keys
  fi
  if sudo test ! -f /root/.ssh/lxc_rsa; then
    sudo ssh-keygen -t rsa -N "" -C ${USER} -f /root/.ssh/lxc_rsa
    sudo ssh-add /root/.ssh/lxc_rsa
  fi
}

bridge_wireless() {
  sudo bash -c "echo 1 > /proc/sys/net/ipv4/ip_forward"
  if [ `grep -c -E '^net.ipv4.ip_forward=1' /etc/sysctl.conf` -gt 0 ]; then
    echo "** ip_forward entry already exists in /etc/sysctl.conf!"
  else
    sudo bash -c "echo net.ipv4.ip_forward=1 >> /etc/sysctl.conf"
  fi
  if [ `ifconfig wlan0 2>&1 | grep -c error` -eq 0 ]; then
    sudo /sbin/iptables -t nat -A POSTROUTING -o wlan0 -j MASQUERADE
  fi
}

update_distro_specific_configuration() {
  case "${1}" in
    "potato" | "woody" | "sarge" | "etch" | "lenny")
      eval "${2}=http://archive.debian.org/debian"
      eval "${3}=${PACKAGES},dhcp3-client"
      return 0
      ;;
    "stable" | "testing" | "unstable" | "squeeze" | "wheezy")
      eval "${2}=http://ftp.debian.org/debian"
      eval "${3}=${PACKAGES},isc-dhcp-client"
      return 0
      ;;
    "hardy" | "lucid" | "natty" | "oneiric" | "precise" | "quantal" | "raring")
      eval "${2}=http://archive.ubuntu.com/ubuntu"
      eval "${3}=${PACKAGES},isc-dhcp-client"
      return 0
      ;;
    *)
      echo -e "qlxc: ${RED}Unknown distro \"${1}\"${NOCOLOR}"
      return 1
      ;;
  esac
}

is_digit() {
  if [ ${#} -ne 1 ]; then
    return 1
  fi

  case ${1} in
    *[!0-9]*|"") return 1;;
    *) return 0;;
  esac
}

count_down() {
  if is_digit "${1}"; then
    local i=${1}
  else
    local i=5
  fi

  echo -ne "To cancel press CTRL+C in${RED}"

  while [ ${i} -ge 0 ]; do
    echo -n " ${i}"
    let i--
    sleep 1
  done

  echo -e ${NOCOLOR}
}

do_deploy() {
  ( [ -z "${1}" ] || [ -z "${2}" ] ) && die_usage

  load_config
  configure_keys

  local distro="${1}"
  local arch="${2}"
  local basename="${distro}-${arch}"
  [ -z "${3}" ] && local containername=${basename} || local containername="${3}"
  local rootfs="${DEPLOY_DIR}/${containername}"
  local hwaddr="00`echo ${containername} | md5sum | perl -ne 'for ($i=0;$i<10;$i+=2) { print ":".substr($_, $i, 2) }'`"
  local opt_sep=' '
  local tarball="${CACHE_DIR}/${basename}-`echo ${PACKAGES} | sha1sum | perl -ne '/([\w\d]+)\s.*/ && print "$1"'`.tgz"

  if ! update_distro_specific_configuration "${1}" MIRROR PACKAGES; then
    echo -e "qlxc: ${RED}Failed to configure \"${1}\" distro${NOCOLOR}"
    exit 1
  fi

  echo -e "Distro ${BLUE}${distro}${NOCOLOR} (${BLUE}${arch}${NOCOLOR}) is going to be debootstrapped to"
  echo -e "${DEPLOY_DIR}/${containername}"
  echo

  count_down 5

  echo

  sudo apt-get -y --force-yes install lxc bridge-utils libvirt-bin debootstrap

  if ! dpkg-query -W debootstrap | perl -ne '/^debootstrap\s+1.*$/ && exit 1'; then
    opt_sep='='
  fi

  if [ ! -d "${rootfs}" ]; then
    if [ ! -f "${tarball}" ]; then
      sudo debootstrap --verbose --no-check-gpg --variant=minbase --arch=${arch} --include="${PACKAGES}" --make-tarball${opt_sep}"${tarball}" ${distro} `mktemp -d` ${MIRROR} || exit 1
    fi
    sudo debootstrap --verbose --no-check-gpg --variant=minbase --arch=${arch} --include="${PACKAGES}" --unpack-tarball${opt_sep}"${tarball}" ${distro} "${rootfs}" ${MIRROR} || exit 1
    sudo mkdir -p ${rootfs}/home/${USER}
    sudo chown -R ${USER}:${USER} ${rootfs}/home/${USER}
    sudo chmod 0700 ${rootfs}/home/${USER}
    # user keys
    if ! grep -f ${HOME}/.ssh/lxc_rsa.pub ${HOME}/.ssh/authorized_key &>/dev/null; then
      cat ${HOME}/.ssh/lxc_rsa.pub >> ${HOME}/.ssh/authorized_keys
    fi
    # root keys
    sudo mkdir -p ${rootfs}/root/.ssh
    sudo bash -c "cat /root/.ssh/lxc_rsa.pub >> ${rootfs}/root/.ssh/authorized_keys"
    sudo bash -c "cat >${DEPLOY_DIR}/${containername}.conf <<EOF
lxc.tty = 4
lxc.pts = 1024
lxc.utsname = ${containername}
lxc.rootfs = ${rootfs}
lxc.cgroup.devices.deny = a
lxc.cgroup.devices.allow = c 1:3 rwm
lxc.cgroup.devices.allow = c 1:5 rwm
lxc.cgroup.devices.allow = c 5:1 rwm
lxc.cgroup.devices.allow = c 5:0 rwm
lxc.cgroup.devices.allow = c 4:0 rwm
lxc.cgroup.devices.allow = c 4:1 rwm
lxc.cgroup.devices.allow = c 1:9 rwm
lxc.cgroup.devices.allow = c 1:8 rwm
lxc.cgroup.devices.allow = c 136:* rwm
lxc.cgroup.devices.allow = c 5:2 rwm
lxc.cgroup.devices.allow = c 254:0 rwm
lxc.mount.entry=proc ${rootfs}/proc proc nodev,noexec,nosuid 0 0
lxc.mount.entry=devpts ${rootfs}/dev/pts devpts defaults 0 0
lxc.mount.entry=sysfs ${rootfs}/sys sysfs defaults 0 0
lxc.mount.entry=/home/${USER} ${rootfs}/home/${USER} none rbind 0 0
lxc.mount.entry=/var/cache/apt/archives ${rootfs}/var/cache/apt/archives none rbind 0 0
lxc.network.type = veth
lxc.network.flags = up
lxc.network.link = lxcbr0
lxc.network.name = eth0
lxc.network.hwaddr = ${hwaddr}
EOF"
    sudo chmod ugo-x ${rootfs}/etc/init.d/hwclock*
    sudo bash -c "echo ${containername} > ${rootfs}/etc/hostname"
    sudo bash -c "echo en_US.UTF-8 UTF-8 > ${rootfs}/etc/locale.gen"
    sudo bash -c "cat >${rootfs}/etc/network/interfaces <<EOF
auto lo
iface lo inet loopback

auto eth0
iface eth0 inet dhcp
EOF"
    sudo sed -i -e's/^5:23:respawn/#5:23:respawn/g' ${rootfs}/etc/inittab
    sudo sed -i -e's/^6:23:respawn/#6:23:respawn/g' ${rootfs}/etc/inittab
    sudo mkdir ${rootfs}/home/${USER}
    sudo chown ${USER}:${USER} ${rootfs}/home/${USER}
    sudo ln -sf ${DEPLOY_DIR}/${containername}.conf /etc/lxc/${containername}.conf
    sudo lxc-start -d -n ${containername} -f /etc/lxc/${containername}.conf
    sleep 15 # lolwut
    local uid=`id -u ${USER}`
    sudo ${src}/lxcssh ${containername} "groupadd -g ${uid} ${USER}; useradd -r -s /bin/bash -d /home/${USER} -g ${uid} -u ${uid} -G sudo ${USER}"
    sudo bash -c "cat >>${rootfs}/etc/sudoers <<EOF
${USER} ALL=(ALL) NOPASSWD: ALL
EOF"
  else
    echo -e "quick-lxc-deploy: ${RED}Directory ${rootfs} already exist!${NOCOLOR}"
  fi

  if [ `grep -cE '^RUN' /etc/default/lxc` -eq 0 ]; then
    sudo bash -c "cat >>/etc/default/lxc <<EOF
RUN=yes
EOF"
  fi
  if [ `grep -cE '^CONF_DIR' /etc/default/lxc` -eq 0 ]; then
    sudo bash -c "cat >>/etc/default/lxc <<EOF
CONF_DIR=/etc/lxc
EOF"
  fi

  bridge_wireless

  echo -e "-- Container rootfs: ${BLUE}${DEPLOY_DIR}/${containername}${NOCOLOR}"
  echo -e "-- Container configuration: ${BLUE}/etc/lxc/${containername}.conf${NOCOLOR}"
  echo -e "-- Container packages tarball: ${BLUE}${CACHE_DIR}/${containername}.tgz${NOCOLOR}"
  echo -e "-- To autostart your brand new container at boot link ${BLUE}/etc/lxc/${containername}.conf${NOCOLOR}"
  echo -e "-- to ${BLUE}/etc/lxc/auto/${containername}.conf${NOCOLOR}"
}

build_container_status() {
  containers_all=(
                   `ls /etc/lxc/*.conf 2>/dev/null | grep -Ev 'default|lxc\.conf' | sed -e's/\/etc\/lxc\/\(.*\)\.conf/\1/' | sort`
                 )
  containers_started=(
                       `ps ax | perl -ne '/.*lxc-start.*\-n\s([\w\d\-\._]+).*/ && print "$1\n"' | sort`
                     )
  containers_started_ip=(
                          `for c in ${containers_started[@]}; do
                            ip=\$(cat /etc/lxc/\${c}.conf | perl -ne '/^lxc\.network\.hwaddr\s\=\s(.*)/&&print"$1\n"' | tr '[A-Z]' '[a-z]' |
                                  while read h; do cat /var/lib/misc/dnsmasq*.leases | grep \${h} | cut -d ' ' -f 3; done)
                            if [ -z "\${ip}" ]; then
                              echo "notfound"
                            else
                              echo "\${ip}"
                            fi
                          done`
                        )
  containers_stopped=(
                       `diff \
                          <(echo ${containers_all[@]} | tr ' ' '\n') \
                          <(echo ${containers_started[@]} | tr ' ' '\n') |
                        perl -ne '/\<\s+(.*)/&&print"$1\n"'`
                     )
}

does_container_exist() {
  if [ ! -z "${1}" ] && grep -E "^${1}\$" <(echo ${containers_all[@]} | tr ' ' '\n') &>/dev/null; then
    return 0
  else
    return 1
  fi
}

is_container_running() {
  if [ ! -z "${1}" ] && grep -E "^${1}\$" <(echo ${containers_started[@]} | tr ' ' '\n') &>/dev/null; then
    return 0
  else
    return 1
  fi
}

get_container_ip() {
  if [ ${#} -ne 2 ]; then
    return 1
  fi

  local ip_idx=`grep -nE "^${2}\$" <(echo ${containers_started[@]} | tr ' ' '\n') |
                perl -ne '/^(\d+)\:.*/&&print int($1)-1'`

  if [ -z "${ip_idx}" ] || [ -z "${containers_started_ip[${ip_idx}]}" ] ||
     [ "${containers_started_ip[${ip_idx}]}" = "notfound" ]
  then
    return 1
  fi

  eval "${1}=\${containers_started_ip[\${ip_idx}]}"
  return 0
}

read_running_container() {
  if [ ${#} -ne 2 ] || [ -z "${1}" ]; then
    return 1
  fi

  build_container_status

  if [ ${#containers_all[@]} -eq 0 ]; then
    echo -e "qlxc: ${RED}You have no containers deployed${NOCOLOR}"
    return 1
  fi

  local active_containers=()

  for c in ${containers_all[@]}; do
    if is_container_running "${c}"; then
      active_containers+=( "${c}" )
    fi
  done

  local container=""

  if is_digit "${2}" && [ ${2} -ge 0 ] && [ ! -z "${active_containers[${2}]}" ]; then
    container=${active_containers[${2}]}
  elif [ ! -z "${2}" ]; then
    if ! does_container_exist "${2}"; then
      echo -e "qlxc: ${RED}Container \"${2}\" does not exist${NOCOLOR}"
    elif ! get_container_ip ip "${2}"; then
      echo -e "qlxc: ${RED}Cannot determine an IP address of \"${2}\" container${NOCOLOR}"
    elif ! is_container_running "${2}"; then
      echo -e "qlxc: ${RED}Container \"${2}\" is not running${NOCOLOR}"
    else
      container=${2}
    fi
  fi

  if [ -z "${container}" ]; then
    local i=0
    echo
    for c in ${containers_all[@]}; do
      if ! is_container_running "${c}"; then
        echo -e "      ${BLACK}${c} (not running)${NOCOLOR}"
      elif ! get_container_ip ip "${c}"; then
        echo -e "      ${BLACK}${c} (cannot determine IP)${NOCOLOR}"
      else
        echo -e "  ${YELLOW}[${i}]${NOCOLOR} ${c} ${BLACK}(${ip})${NOCOLOR}"
        let i++
      fi
    done
    echo
    return 1
  fi

  eval "${1}=\${container}"
  return 0
}

read_not_running_container() {
  if [ ${#} -ne 2 ] || [ -z "${1}" ]; then
    return 1
  fi

  build_container_status

  if [ ${#containers_all[@]} -eq 0 ]; then
    echo -e "qlxc: ${RED}You have no containers deployed${NOCOLOR}"
    return 1
  fi

  local active_containers=()

  for c in ${containers_all[@]}; do
    if ! is_container_running "${c}"; then
      active_containers+=( "${c}" )
    fi
  done

  local container=""

  if is_digit "${2}" && [ ${2} -ge 0 ] && [ ! -z "${active_containers[${2}]}" ]; then
    container=${active_containers[${2}]}
  elif [ ! -z "${2}" ]; then
    if ! does_container_exist "${2}"; then
      echo -e "qlxc: ${RED}Container \"${2}\" does not exist${NOCOLOR}"
    elif is_container_running "${2}"; then
      echo -e "qlxc: ${RED}Container \"${2}\" is already running${NOCOLOR}"
    else
      container=${active_containers[${2}]}
    fi
  fi

  if [ -z "${container}" ]; then
    local i=0
    echo
    for c in ${containers_all[@]}; do
      if is_container_running "${c}"; then
        echo -e "      ${BLACK}${c} (running)${NOCOLOR}"
      else
        echo -e "  ${YELLOW}[${i}]${NOCOLOR} ${c}"
        let i++
      fi
    done
    echo
    return 1
  fi

  eval "${1}=\${container}"
  return 0
}

do_ssh() {
  if ! read_running_container c "${1}"; then
    exit 1
  fi

  local login=`whoami`
  local keyfile=`getent passwd ${login} | cut -d: -f6`/.ssh/lxc_rsa

  ssh -oStrictHostKeyChecking=no -oPasswordAuthentication=no -oChallengeResponseAuthentication=no -oPreferredAuthentications=publickey \
      -2 -i "${keyfile}" -l "${login}" "$(get_container_ip ip ${c}; echo ${ip})" "${*:2}"
}

do_start() {
  if ! read_not_running_container c "${1}"; then
    exit 1
  fi

  if sudo lxc-start -d -n "${c}" -f "/etc/lxc/${c}.conf"; then
    echo -e "qlxc: start: \"${c}\" container started succesffuly"
  else
    echo -e "qlxc: start: ${RED}Failed to start \"${c}\" container${NOCOLOR}"
  fi
}

do_stop() {
  if ! read_running_container c "${1}"; then
    exit 1
  fi

  if sudo lxc-stop -n ${c}; then
    echo -e "qlxc: stop: \"${c}\" container stopped succesffuly"
  else
    echo -e "qlxc: stop: ${RED}Failed to stop \"${c}\" container${NOCOLOR}"
  fi
}

do_rm() {
  if ! read_not_running_container c "${1}"; then
    exit 1
  fi

  local rootfs="`dirname $(readlink -f /etc/lxc/${c}.conf)`/${c}"

  if mount 2>&1 | grep ${rootfs}; then
    echo -e "qlxc: rm: ${RED}There seems to be filesystems mounted under \"${c}\" container's rootfs${NOCOLOR}"
    exit 1
  fi

  local to_be_removed=(
                        "$(readlink -f /etc/lxc/${c}.conf)"
                        "$(dirname $(readlink -f /etc/lxc/${c}.conf))/${c}.hold"
                        "${rootfs}"
                        "/etc/lxc/${c}.conf"
                      )

  echo -e "Removing container ${RED}${c}${NOCOLOR} - the following files will be wiped out:"
  echo
  for f in ${!to_be_removed[@]}; do
    if [ -e "${to_be_removed[${f}]}" ]; then
      echo -e "  ${RED}${to_be_removed[${f}]}${NOCOLOR}"
    fi
  done
  echo

  count_down 10

  echo

  if printf "%s\n" "${to_be_removed[@]}" | xargs -i sudo rm -rf {}; then
    echo -e "qlxc: rm: \"${c}\" container removed succesffuly"
  else
    echo -e "qlxc: rm: ${RED}Failed to remove \"${c}\" container${NOCOLOR}"
  fi
}

main() {
  local cmd_arg_idx=1
  if [ -z "${cmd}" ]; then
    cmd=${1}
    cmd_arg_idx=2
  fi
  case "${cmd}" in
    "deploy")
      do_deploy ${*:${cmd_arg_idx}}
      ;;
    "ssh")
      do_ssh ${*:${cmd_arg_idx}}
      ;;
    "start")
      do_start ${*:${cmd_arg_idx}}
      ;;
    "stop")
      do_stop ${*:${cmd_arg_idx}}
      ;;
    "rm")
      do_rm ${*:${cmd_arg_idx}}
      ;;
    "help"|"")
      die_usage
      ;;
    *)
      echo -e "qlxc: ${RED}Unrecognized option: ${cmd}${NOCOLOR}"
      echo
      die_usage
      ;;
  esac
}

main ${*}
